name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Update system
        run: sudo apt update

      - name: Install Dependencies
        run: |
          sudo apt install -y \
            cmake \
            libev4 libev-dev \
            libsystemd-dev \
            python3-docutils \
            libzstd-dev \
            liblz4-dev \
            libbz2-dev \
            graphviz \
            doxygen \
            clang \
            net-tools \
            pandoc texlive texlive-latex-extra texlive-fonts-extra texlive-xetex \
            texlive-luatex texlive-science texlive-extra-utils

      - name: Install Eisvogel template for Pandoc
        run: |
          wget https://github.com/Wandmalfarbe/pandoc-latex-template/releases/download/v3.1.0/Eisvogel-3.1.0.tar.gz
          tar -xzf Eisvogel-3.1.0.tar.gz
          mkdir -p ~/.local/share/pandoc/templates
          mv Eisvogel-3.1.0/eisvogel.latex ~/.local/share/pandoc/templates/

      - name: Install PostgreSQL
        run: |
          sudo apt install -y postgresql curl ca-certificates
          sudo install -d /usr/share/postgresql-common/pgdg
          sudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
          sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt update
          sudo apt install -y postgresql-17 postgresql-common postgresql-contrib

      - name: Set Env Path Variable for PostgreSQL
        run: |
          echo "PATH=$PATH:/usr/lib/postgresql/17/bin" >> $GITHUB_ENV
          echo $PATH

      - name: Start PostgreSQL
        run: |
          sudo systemctl start postgresql || exit 1
          pg_isready -h 127.0.0.1 | grep '5432' || (echo "Nothing is listening on 127.0.0.1:5432" && exit 1)
          pg_isready -h ::1 | grep '5432' || (echo "Nothing is listening on ::1:5432" && exit 1)
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"
          PGPASSWORD="postgres" pgbench -i -s 1 -h localhost -p 5432 -U postgres -d postgres

      - name: Define verify functions
        run: |
          echo 'verify_running() {
            echo "Confirming pgagroal is listening on port 2345"
            netstat -tuln | grep "127.0.0.1:2345" || (echo "Nothing is listening on 127.0.0.1:2345" && exit 1)
            netstat -tuln | grep "::1:2345" || (echo "Nothing is listening on ::1:2345" && exit 1)
            echo "[*] Running pgagroal-cli ping"
            ./pgagroal-cli ping
            echo "[*] Running queries with psql"
            PGPASSWORD="postgres" psql -h 127.0.0.1 -p 2345 -U postgres -d postgres -c "SELECT * FROM pgbench_accounts LIMIT 50;" > /dev/null
            PGPASSWORD="postgres" psql -h ::1 -p 2345 -U postgres -d postgres -c "SELECT * FROM pgbench_accounts LIMIT 50;" > /dev/null
          }

          verify_shutdown() {
            echo "[*] Running pgagroal-cli shutdown immediate"
            ./pgagroal-cli shutdown immediate
            sleep 5
            echo "[*] Confirming there are no dangling pgagroal processes"
            pgrep pgagroal > /dev/null && echo "[E] Dangling pgagroal child processes: $(wc -l < <(pgrep pgagroal))" && exit 1
            echo "rm -f /tmp/pgagroal.2345.pid"
            rm -f /tmp/pgagroal.2345.pid
          }' > /tmp/functions.sh

      - name: Setup pgagroal
        run: |
            sudo mkdir -p /etc/pgagroal
            sudo cp ./doc/etc/*.conf /etc/pgagroal
            sudo bash -c 'tee /etc/pgagroal/pgagroal.conf > /dev/null <<EOF
            [pgagroal]
            host = *
            port = 2345

            log_type = file
            log_level = debug5
            log_path = /tmp/pgagroal.log

            max_connections = 100
            idle_timeout = 600
            validation = off
            unix_socket_dir = /tmp/

            [primary]
            host = localhost
            port = 5432
            EOF'
        working-directory: /home/runner/work/pgagroal/pgagroal/

      - name: Build Project
        run: |
          mkdir build
          cd build
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            export CC=/usr/bin/gcc
          else
            export CC=/usr/bin/clang
          fi

          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
           make -j$(nproc)
        working-directory: /home/runner/work/pgagroal/pgagroal/

      - name: Run pgagroal & verify (GCC/Debug or Clang/Debug & Release)
        run: |
          cd build/src
          ./pgagroal -d
          source /tmp/functions.sh
          verify_running
          verify_shutdown
        working-directory: /home/runner/work/pgagroal/pgagroal/

      - name: Upload Build and Run Logs as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.compiler }}-${{ matrix.build_type }}
          path:  /tmp/pgagroal.log
          retention-days: 90

      - name: Upload Generated Documentation Artifact
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: generated-docs
          path: build/doc/
          retention-days: 90

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Homebrew packages
        uses: actions/cache@v3
        with:
          path: ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-homebrew-${{ hashFiles('.github/workflows/build-macos.yml') }}
          restore-keys: ${{ runner.os }}-homebrew-

      - name: Install dependencies
        run: |
          brew update
          brew install openssl libev zstd lz4 bzip2 docutils graphviz doxygen
          brew install postgresql@17

      - name: Start PostgreSQL
        run: |
          brew services start postgresql@17
          # Wait for PostgreSQL to start
          for i in {1..30}; do
            if pg_isready; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL to start..."
            sleep 1
          done

      - name: Configure and build with clang
        run: |
          export OPENSSL_ROOT_DIR=$(brew --prefix openssl)
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug ..
          make -j$(sysctl -n hw.ncpu)

      - name: Run pgagroal and test
        run: |
          sudo mkdir -p /etc/pgagroal
          sudo cp doc/etc/*.conf /etc/pgagroal
          cd build/src
          ./pgagroal > /dev/null 2>&1 &
          # Give pgagroal time to start
          sleep 5
          # Test if pgagroal is running
          if ! ./pgagroal-cli ping; then
            echo "pgagroal failed to start"
            exit 1
          fi
          # Shutdown pgagroal
          ./pgagroal-cli shutdown

      - name: Stop PostgreSQL
        run: |
          brew services stop postgresql@14
        if: always()

  build-freebsd:
    runs-on: ubuntu-latest
    name: FreeBSD Build and Test
    strategy:
      matrix:
        compiler: [clang]
        build_type: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Install QEMU dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-system-x86 \
            qemu-utils \
            libvirt-daemon-system \
            libvirt-clients \
            bridge-utils
          sudo systemctl start libvirtd

      - name: Setup FreeBSD VM
        uses: vmactions/freebsd-vm@v1
        id: freebsd-vm
        with:
          release: "14.2"
          usesh: true
          envs: "PATH,GITHUB_ENV,GITHUB_WORKSPACE,GITHUB_OUTPUT"
          mem: 6144
          sync: rsync
          copyback: true
          prepare: |
            # System bootstrap
            ASSUME_ALWAYS_YES=yes pkg bootstrap
            pkg update
            pkg upgrade -y

            # Base dependencies
            pkg install -y \
              bash \
              sudo \
              libev \
              cmake \
              llvm11 \
              postgresql17-server \
              postgresql17-contrib \
              zstd \
              liblz4 \
              bzip2 \
              libssh \
              libarchive \
              check \
              py311-docutils \
              curl \
              doxygen \
              hs-pandoc \
              texlive-base \
              texlive-texmf \
              graphviz

      - name: Configure PostgreSQL
        shell: freebsd {0}
        run: |
          if ! id postgres >/dev/null 2>&1; then
            pw groupadd -n postgres -g 770
            pw useradd -n postgres -u 770 -g postgres -d /var/db/postgres -s /bin/sh
          fi
          rm -rf /var/db/postgres/data17  # Delete the broken directory
          mkdir -p /var/db/postgres/data17
          chown -R postgres:postgres /var/db/postgres
          su - postgres -c "/usr/local/bin/initdb -D /var/db/postgres/data17 -E UTF8"
          sysrc postgresql_enable=YES
          service postgresql start

          psql -U postgres -c "ALTER USER postgres WITH PASSWORD 'postgres';"

          createdb testdb -U postgres
          PGPASSWORD="postgres" pgbench -i -s 1 -U postgres -d testdb
      - name : Define verify functions
        shell: freebsd {0}
        run: |
          echo 'verify_running() {
           echo "DEBUG: GITHUB_WORKSPACE=${GITHUB_WORKSPACE}" >&2
           ls -la "${GITHUB_WORKSPACE}/build/src/pgagroal-cli" >&2

            echo "Confirming pgagroal is listening on port 2345"
            sockstat -4l | grep ".2345" || (echo "Nothing is listening on port 2345" && exit 1)

            echo "[*] Running pgagroal-cli ping"
            ${GITHUB_WORKSPACE}/build/src/pgagroal-cli -c /etc/pgagroal/pgagroal.conf ping

            echo "[*] Running queries with psql"
            PGPASSWORD="postgres" psql -h 127.0.0.1 -p 2345 -U postgres -d testdb -c "SELECT * FROM pgbench_accounts LIMIT 50;" > /dev/null
          }

          verify_shutdown() {
            echo "[*] Running pgagroal-cli shutdown immediate"
            ${GITHUB_WORKSPACE}/build/src/pgagroal-cli -c /etc/pgagroal/pgagroal.conf shutdown immediate
            sleep 5
            echo "[*] Checking for dangling pgagroal processes"
            if pgrep pgagroal > /dev/null; then
              echo "[W] Found dangling pgagroal processes, killing them"
              pkill -9 pgagroal
              sleep 2
            fi
            echo "[*] Confirming there are no dangling pgagroal processes"
            pgrep pgagroal > /dev/null && echo "[E] Dangling pgagroal child processes: $(pgrep pgagroal | wc -l)" && exit 1
            echo "[*] rm -f /tmp/pgagroal.2345.pid"
            rm -f /tmp/pgagroal.2345.pid
          }' > /tmp/functions.sh
      - name: Setup pgagroal
        shell: freebsd {0}
        run: |
          mkdir -p /etc/pgagroal
          cp ./doc/etc/*.conf /etc/pgagroal

          cat > /etc/pgagroal/pgagroal.conf <<EOF
          [pgagroal]
          host = *
          port = 2345

          log_type = file
          log_level = debug5
          log_path = /tmp/pgagroal.log

          max_connections = 100
          idle_timeout = 600
          validation = off
          unix_socket_dir = /tmp/

          [primary]
          host = 127.0.0.1
          port = 5432
          EOF

          cat > /etc/pgagroal/pgagroal_hba.conf <<EOF
          #
          # TYPE  DATABASE USER  ADDRESS  METHOD
          #
          host    all      all   all      all
          EOF

      - name: Build Project
        shell: freebsd {0}
        run: |
          mkdir -p $GITHUB_WORKSPACE/build
          cd $GITHUB_WORKSPACE/build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} "$GITHUB_WORKSPACE"
          make -j$(sysctl -n hw.ncpu)

      - name: Debug Testsuite Path
        shell: freebsd {0}
        run: |
          cd "${GITHUB_WORKSPACE}/build/src"
          su - postgres -c "${GITHUB_WORKSPACE}/build/src/pgagroal -c /etc/pgagroal/pgagroal.conf -a /etc/pgagroal/pgagroal_hba.conf -d"
          sleep 2
          RUN_CMD=". /tmp/functions.sh && export GITHUB_WORKSPACE='${GITHUB_WORKSPACE}' && verify_running"
          SHUTDOWN_CMD=". /tmp/functions.sh && export GITHUB_WORKSPACE='${GITHUB_WORKSPACE}' && verify_shutdown"

          su - postgres -c "$RUN_CMD"
          su - postgres -c "$SHUTDOWN_CMD"

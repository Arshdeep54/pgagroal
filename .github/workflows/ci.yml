name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Update system
        run: sudo apt update

      - name: Install Dependencies
        run: |
          sudo apt install -y \
            cmake \
            libev4 libev-dev \
            libsystemd-dev \
            python3-docutils \
            libzstd-dev \
            liblz4-dev \
            libbz2-dev \
            check \
            graphviz \
            doxygen \
            clang \
            net-tools \
            pandoc texlive texlive-latex-extra texlive-fonts-extra texlive-xetex \
            texlive-luatex texlive-science texlive-extra-utils

      - name: Install Eisvogel template for Pandoc
        run: |
          wget https://github.com/Wandmalfarbe/pandoc-latex-template/releases/download/v3.1.0/Eisvogel-3.1.0.tar.gz
          tar -xzf Eisvogel-3.1.0.tar.gz
          mkdir -p ~/.local/share/pandoc/templates
          mv Eisvogel-3.1.0/eisvogel.latex ~/.local/share/pandoc/templates/

      - name: Install PostgreSQL
        run: |
          sudo apt install -y postgresql curl ca-certificates
          sudo install -d /usr/share/postgresql-common/pgdg
          sudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
          sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt update
          sudo apt install -y postgresql-17 postgresql-common postgresql-contrib

      - name: Set Env Path Variable for PostgreSQL
        run: |
          echo "PATH=$PATH:/usr/lib/postgresql/17/bin" >> $GITHUB_ENV
          echo $PATH

      # - name: Start PostgreSQL
      #   run: |
      #     sudo systemctl start postgresql || exit 1
      #     pg_isready -h 127.0.0.1 | grep '5432' || (echo "Nothing is listening on 127.0.0.1:5432" && exit 1)
      #     pg_isready -h ::1 | grep '5432' || (echo "Nothing is listening on ::1:5432" && exit 1)
      #     sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"
      #     PGPASSWORD="postgres" pgbench -i -s 1 -h localhost -p 5432 -U postgres -d postgres

      # - name: Define verify functions
      #   run: |
      #     echo 'verify_running() {
      #       echo "Confirming pgagroal is listening on port 2345"
      #       netstat -tuln | grep "127.0.0.1:2345" || (echo "Nothing is listening on 127.0.0.1:2345" && exit 1)
      #       netstat -tuln | grep "::1:2345" || (echo "Nothing is listening on ::1:2345" && exit 1)
      #       echo "[*] Running pgagroal-cli ping"
      #       ./pgagroal-cli ping
      #       echo "[*] Running queries with psql"
      #       PGPASSWORD="postgres" psql -h 127.0.0.1 -p 2345 -U postgres -d postgres -c "SELECT * FROM pgbench_accounts LIMIT 50;" > /dev/null
      #       PGPASSWORD="postgres" psql -h ::1 -p 2345 -U postgres -d postgres -c "SELECT * FROM pgbench_accounts LIMIT 50;" > /dev/null
      #     }

      #     verify_shutdown() {
      #       echo "[*] Running pgagroal-cli shutdown immediate"
      #       ./pgagroal-cli shutdown immediate
      #       sleep 5
      #       echo "[*] Confirming there are no dangling pgagroal processes"
      #       pgrep pgagroal > /dev/null && echo "[E] Dangling pgagroal child processes: $(wc -l < <(pgrep pgagroal))" && exit 1
      #       echo "rm -f /tmp/pgagroal.2345.pid"
      #       rm -f /tmp/pgagroal.2345.pid
      #     }' > /tmp/functions.sh

      # - name: Setup pgagroal
      #   run: |
      #       sudo mkdir -p /etc/pgagroal
      #       sudo cp ./doc/etc/*.conf /etc/pgagroal
      #       sudo bash -c 'tee /etc/pgagroal/pgagroal.conf > /dev/null <<EOF
      #       [pgagroal]
      #       host = *
      #       port = 2345

      #       log_type = file
      #       log_level = debug5
      #       log_path = /tmp/pgagroal.log

      #       max_connections = 100
      #       idle_timeout = 600
      #       validation = off
      #       unix_socket_dir = /tmp/

      #       [primary]
      #       host = localhost
      #       port = 5432
      #       EOF'
      #   working-directory: /home/runner/work/pgagroal/pgagroal/

      - name: Build Project
        run: |
          mkdir build
          cd build
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            export CC=/usr/bin/gcc
          else
            export CC=/usr/bin/clang
          fi

          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
           make -j$(nproc)
        working-directory: /home/runner/work/pgagroal/pgagroal/

      - name: Testsuite
        id: test
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ] && [ "${{ matrix.build_type }}" = "Debug" ]; then
            ASAN_LIB=$(gcc -print-file-name=libasan.so)
            if [ -n "$ASAN_LIB" ] && [ -f "$ASAN_LIB" ]; then
              echo "Using GCC AddressSanitizer preload for Debug build"
              export ASAN_OPTIONS=verify_asan_link_order=0
              export LD_PRELOAD=$ASAN_LIB
              export ASAN_OPTIONS=detect_leaks=0,verify_asan_link_order=0
            fi
          fi
          $(which bash) ./testsuite.sh run-configs
        working-directory: /home/runner/work/pgagroal/pgagroal/build

      # - name: Run pgagroal & verify (GCC/Debug or Clang/Debug & Release)
      #   run: |
      #     cd build/src
      #     ./pgagroal -d
      #     source /tmp/functions.sh
      #     verify_running
      #     verify_shutdown
      #   working-directory: /home/runner/work/pgagroal/pgagroal/

      - name: Upload Build and Run Logs as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.compiler }}-${{ matrix.build_type }}
          path:  /tmp/pgagroal.log
          retention-days: 90

      - name: Testsuite Clean
        run: $(which bash) ./testsuite.sh clean
        working-directory: /home/runner/work/pgagroal/pgagroal/build

      - name: Upload Generated Documentation Artifact
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: generated-docs
          path: build/doc/
          retention-days: 90

  build-macos:
    runs-on: macos-latest
    env:
      PGAGROAL_ROOT: ${{ github.workspace }}
      BUILD_DIR: ${{ github.workspace }}/build
      POSTGRESQL_VERSION: "@17"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Homebrew packages
        uses: actions/cache@v3
        with:
          path: ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-homebrew-${{ hashFiles('.github/workflows/build-macos.yml') }}
          restore-keys: ${{ runner.os }}-homebrew-

      - name: Install dependencies
        run: |
          brew update
          brew install openssl libev zstd lz4 libssh bzip2 docutils check graphviz doxygen
          brew install postgresql${POSTGRESQL_VERSION}
          
      - name: Add PostgreSQL to Path
        run: |
          echo "$(brew --prefix postgresql${POSTGRESQL_VERSION})/bin" >> $GITHUB_PATH

      # - name: Start PostgreSQL
      #   run: |
      #     brew services start postgresql@17
      #     # Wait for PostgreSQL to start
      #     for i in {1..30}; do
      #       if pg_isready; then
      #         echo "PostgreSQL is ready"
      #         break
      #       fi
      #       echo "Waiting for PostgreSQL to start..."
      #       sleep 1
      #     done

      - name: Configure and build with clang
        run: |
          export OPENSSL_ROOT_DIR=$(brew --prefix openssl)
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug ..
          make -j$(sysctl -n hw.ncpu)
      
      - name: Run tests with Clang build
        working-directory: ${{ env.BUILD_DIR }}
        run: $(which bash) ./testsuite.sh
  
      - name: Clean up after Clang tests
        working-directory: ${{ env.BUILD_DIR }}
        run: $(which bash) ./testsuite.sh clean

      - name: Show logs on failure
        if: failure()
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          cat ./log/logfile || echo "logfile not found"
          cat ./log/pgagroal.log || echo "pgagroal.log not found"

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-logs
          path: |
            ${{ env.BUILD_DIR }}/log/
            /tmp/*.log
          retention-days: 7

      # - name: Run pgagroal and test
      #   run: |
      #     sudo mkdir -p /etc/pgagroal
      #     sudo cp doc/etc/*.conf /etc/pgagroal
      #     cd build/src
      #     ./pgagroal > /dev/null 2>&1 &
      #     # Give pgagroal time to start
      #     sleep 5
      #     # Test if pgagroal is running
      #     if ! ./pgagroal-cli ping; then
      #       echo "pgagroal failed to start"
      #       exit 1
      #     fi
      #     # Shutdown pgagroal
      #     ./pgagroal-cli shutdown

      # - name: Stop PostgreSQL
      #   run: |
      #     brew services stop postgresql@14
      #   if: always()

  build-freebsd:
    runs-on: ubuntu-latest
    name: FreeBSD Build and Test
    strategy:
      matrix:
        compiler: [clang]
        build_type: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Install QEMU dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-system-x86 \
            qemu-utils \
            libvirt-daemon-system \
            libvirt-clients \
            bridge-utils
          sudo systemctl start libvirtd

      - name: Setup FreeBSD VM
        uses: vmactions/freebsd-vm@v1
        id: freebsd-vm
        with:
          release: "14.2"
          usesh: true
          envs: "PATH,GITHUB_ENV,GITHUB_WORKSPACE,GITHUB_OUTPUT"
          mem: 6144
          sync: rsync
          copyback: true
          prepare: |
            # System bootstrap
            ASSUME_ALWAYS_YES=yes pkg bootstrap
            pkg update
            pkg upgrade -y

            # Base dependencies
            pkg install -y \
              bash \
              sudo \
              libev \
              cmake \
              llvm11 \
              postgresql17-server \
              postgresql17-contrib \
              zstd \
              liblz4 \
              bzip2 \
              libssh \
              libarchive \
              check \
              py311-docutils \
              curl \
              doxygen \
              hs-pandoc \
              texlive-base \
              texlive-texmf \
              graphviz

      - name: Build Project
        shell: freebsd {0}
        run: |
          mkdir -p $GITHUB_WORKSPACE/build
          cd $GITHUB_WORKSPACE/build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} "$GITHUB_WORKSPACE"
          make -j$(sysctl -n hw.ncpu)

      - name: Debug Testsuite Path
        shell: freebsd {0}
        run: |
          cd "${GITHUB_WORKSPACE}/build"
          bash ./testsuite.sh

      - name: Clean Testsuite
        shell: freebsd {0}
        run: |
          cd ${GITHUB_WORKSPACE}/build
          bash ./testsuite.sh clean

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: freebsd-${{ matrix.compiler }}-${{ matrix.build_type }}-logs
          path: |
            $GITHUB_WORKSPACE/build/log/*
            /tmp/*.log
          retention-days: 7
